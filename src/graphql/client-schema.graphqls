enum Provider {
  CRUNCHYROLL,
  CRUNCHYROLL_MANUAL,
  HIDIVE,
  LOCAL,
}

type Episode {
  provider: Provider!
  id: String!
  animeId: Int!
  title: String!
  duration: Int!
  progress: Int
  """Index in the Array"""
  index: Int!
  """Number in Season"""
  episodeNumber: Int!
  thumbnail: String!
  url: String!
  subtitles: [[String!]!]!
  isWatched: Boolean!
}

input EpisodeInput {
  provider: Provider!
  id: String!
  animeId: Int!
  title: String!
  duration: Int!
  progress: Int
  index: Int!
  episodeNumber: Int!
  thumbnail: String!
  url: String!
  subtitles: [[String!]!]!
  isWatched: Boolean!
}

type ListEntry {
  """Entry ID in service"""
  id: Int!
  """Anime AniList ID"""
  mediaId: Int!
  """Status converted to AniList status"""
  status: MediaListStatus!
  """Score formatted as 0-100"""
  score: Int
  """
  Progress in episodes
  Not started = 0
  """
  progress: Int!
  """Times rewatched"""
  rewatched: Int!
}

extend type Media {
  scoreMal: Int
}

extend type Query {
  Episodes(id: Int!, provider: Provider!): [Episode!]
}

extend type Mutation {
  CacheEpisodes(episodes: [EpisodeInput!]!): Boolean!

  AddToList(anilistId: Int!): ListEntry!

  DeleteFromList(anilistId: Int!): Boolean!

  UpdateStatus(anilistId: Int!, status: MediaListStatus!): ListEntry!

  StartRewatching(anilistId: Int!): ListEntry!

  UpdateProgress(anilistId: Int!, progress: Int!, provider: Provider!): ListEntry!

  UpdateScore(anilistId: Int!, score: Int!): ListEntry!
}
