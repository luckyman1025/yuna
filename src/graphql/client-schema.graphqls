enum Provider {
  CRUNCHYROLL
  CRUNCHYROLL_MANUAL
  HIDIVE
  LOCAL
}

type Episode {
  provider: Provider!
  id: String!
  animeId: Int!
  title: String!
  duration: Int!
  progress: Int
  """
  Index in the Array
  """
  index: Int!
  """
  Number in Season
  """
  episodeNumber: Int!
  thumbnail: String!
  url: String!
  subtitles: [[String!]!]!
  isWatched: Boolean!
}

input EpisodeInput {
  provider: Provider!
  id: String!
  animeId: Int!
  title: String!
  duration: Int!
  progress: Int
  index: Int!
  episodeNumber: Int!
  thumbnail: String!
  url: String!
  subtitles: [[String!]!]!
  isWatched: Boolean!
}

type ListEntry {
  """
  Entry ID in service
  """
  id: Int!
  """
  Anime AniList ID
  """
  mediaId: Int!
  """
  AniList Anime
  """
  media: Media!
  """
  Status converted to AniList status
  """
  status: MediaListStatus!
  """
  Score formatted as 0-100
  """
  score: Int
  """
  Progress in episodes
  Not started = 0
  """
  progress: Int!
  """
  Times rewatched
  """
  rewatched: Int!
}

input EditListEntryOptions {
  status: MediaListStatus!
  score: Int
  progress: Int!
  rewatched: Int!
}

extend type Media {
  scoreMal: Int
  scoreSimkl: Int
  linkSimkl: String
  listEntry: ListEntry
}

extend type Query {
  Episodes(id: Int!, provider: Provider!): [Episode!]

  ListEntry(mediaId: Int!): ListEntry!

  ListEntries(
    id_in: [Int!]
    status: MediaListStatus
    status_not: MediaListStatus
    page: Int
    perPage: Int
  ): [ListEntry!]!
}

extend type Mutation {
  CacheEpisodes(episodes: [EpisodeInput!]!): Boolean!

  AddToList(anilistId: Int!): ListEntry!

  DeleteFromList(anilistId: Int!): Boolean!

  UpdateStatus(anilistId: Int!, status: MediaListStatus!): ListEntry!

  StartRewatching(anilistId: Int!): ListEntry!

  UpdateProgress(anilistId: Int!, progress: Int!): ListEntry!

  UpdateScore(anilistId: Int!, score: Int!): ListEntry!

  EditListEntry(anilistId: Int!, options: EditListEntryOptions!): ListEntry!
}
